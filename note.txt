### Token

- 토큰 기반 인증 시스템을 다른 말로 Stateless 서버라고 부른다. 
- 반대되는 개념으로 Stateful 서버가 있는데, 이는 클라이언트에서 요청을 받을 때마다 클라이언트의 상태를 계속 유지,
- 서비스를 제공할 때 항상 참고해야 한다.

## Stateful 서버 예시
-> 사용자가 아이디와 비밀번호를 입력하고 로그인
-> 로그인이 성공하면 서버 내에 Session을 생성
-> Session id(cookie), 사용자 아이디, 비밀번호가, 권한 등의 정보가 Session에 포함
-> 이후 서버는 세션 아이디인 쿠키(cookie)를 클라이언트에 보내고
-> 클라이언트가 무언가 요청을 할 때마다 이 쿠키를 서버에 보내 서버가 확인하는 것
-> 서버는 쿠키에 담긴 Session id를 찾고, 유효시간 및 권한을 확인
-> 요청에 맞는 특정 웹페이지를 보여줌

-> 이 Session을 저장할 때 서버 컴퓨터의 메모리(RAM)를 사용하기도 하고, DB를 사용하기도하는데
-> 로그인 중인 유저 수가 늘어나게 되면 시스템이 과부화된다는 단점이 존재

## Stateless 서버 예시
- 유저의 상태 정보를 저장하지 않고 클라이언트 측에서 들어오는 요청만으로 작업을 수행
Q. 유저의 상태 정보를 확인하지 않고 어떻게 권한을 부여하는가?
A. 토큰을 사용

-> 서버에서 토큰을 클라이언트에 전달
-> 클라이언트는 이를 저장해두고 요청을 할 때마다 해당토큰을 함께 보냄
-> 토큰을 보낼 때 HTTP request의 headers에 포함
-> 서버는 클라이언트가 보낸 토큰이 유효한지만 확인하고 적절한 권한을 부여
-> 별도의 Session을 저장하고 비교하는 작업을 하지 않음


### Renderers

DRF는 여러가지 Renderer 클래스들을 포함하고 있음
이 클래스들은 다양한 media type과 함께 reponse를 반환할 수 있도록 함
또한 custom renderers를 정의할 수 있도록 돕기도 함

# content negotiation
- 동일한 URI에서 래ㅣ소스의 서로 다른 버전을 서브하기 위해 사용되는 메커니즘
- 사용자 에이전트가 사용자에게 제일 잘 맞는 것이 무엇인지를 명시할 수 있음



### DB 수정시: python manage.py migrate --run-syncdb